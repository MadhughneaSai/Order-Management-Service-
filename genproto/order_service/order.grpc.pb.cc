// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: order_service/order.proto

#include "order_service/order.pb.h"
#include "order_service/order.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace order_service {
namespace v1 {

static const char* OrderService_method_names[] = {
  "/order_service.v1.OrderService/Get",
  "/order_service.v1.OrderService/List",
  "/order_service.v1.OrderService/Create",
  "/order_service.v1.OrderService/Update",
  "/order_service.v1.OrderService/StreamOrderUpdated",
};

std::unique_ptr< OrderService::Stub> OrderService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< OrderService::Stub> stub(new OrderService::Stub(channel, options));
  return stub;
}

OrderService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Get_(OrderService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_List_(OrderService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Create_(OrderService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Update_(OrderService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StreamOrderUpdated_(OrderService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status OrderService::Stub::Get(::grpc::ClientContext* context, const ::order_service::v1::GetRequest& request, ::order_service::v1::GetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::order_service::v1::GetRequest, ::order_service::v1::GetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Get_, context, request, response);
}

void OrderService::Stub::async::Get(::grpc::ClientContext* context, const ::order_service::v1::GetRequest* request, ::order_service::v1::GetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::order_service::v1::GetRequest, ::order_service::v1::GetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, std::move(f));
}

void OrderService::Stub::async::Get(::grpc::ClientContext* context, const ::order_service::v1::GetRequest* request, ::order_service::v1::GetResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::order_service::v1::GetResponse>* OrderService::Stub::PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::order_service::v1::GetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::order_service::v1::GetResponse, ::order_service::v1::GetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Get_, context, request);
}

::grpc::ClientAsyncResponseReader< ::order_service::v1::GetResponse>* OrderService::Stub::AsyncGetRaw(::grpc::ClientContext* context, const ::order_service::v1::GetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrderService::Stub::List(::grpc::ClientContext* context, const ::order_service::v1::ListRequest& request, ::order_service::v1::ListResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::order_service::v1::ListRequest, ::order_service::v1::ListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_List_, context, request, response);
}

void OrderService::Stub::async::List(::grpc::ClientContext* context, const ::order_service::v1::ListRequest* request, ::order_service::v1::ListResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::order_service::v1::ListRequest, ::order_service::v1::ListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, std::move(f));
}

void OrderService::Stub::async::List(::grpc::ClientContext* context, const ::order_service::v1::ListRequest* request, ::order_service::v1::ListResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::order_service::v1::ListResponse>* OrderService::Stub::PrepareAsyncListRaw(::grpc::ClientContext* context, const ::order_service::v1::ListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::order_service::v1::ListResponse, ::order_service::v1::ListRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_List_, context, request);
}

::grpc::ClientAsyncResponseReader< ::order_service::v1::ListResponse>* OrderService::Stub::AsyncListRaw(::grpc::ClientContext* context, const ::order_service::v1::ListRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrderService::Stub::Create(::grpc::ClientContext* context, const ::order_service::v1::CreateRequest& request, ::order_service::v1::CreateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::order_service::v1::CreateRequest, ::order_service::v1::CreateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Create_, context, request, response);
}

void OrderService::Stub::async::Create(::grpc::ClientContext* context, const ::order_service::v1::CreateRequest* request, ::order_service::v1::CreateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::order_service::v1::CreateRequest, ::order_service::v1::CreateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, std::move(f));
}

void OrderService::Stub::async::Create(::grpc::ClientContext* context, const ::order_service::v1::CreateRequest* request, ::order_service::v1::CreateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::order_service::v1::CreateResponse>* OrderService::Stub::PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::order_service::v1::CreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::order_service::v1::CreateResponse, ::order_service::v1::CreateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Create_, context, request);
}

::grpc::ClientAsyncResponseReader< ::order_service::v1::CreateResponse>* OrderService::Stub::AsyncCreateRaw(::grpc::ClientContext* context, const ::order_service::v1::CreateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrderService::Stub::Update(::grpc::ClientContext* context, const ::order_service::v1::UpdateRequest& request, ::order_service::v1::UpdateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::order_service::v1::UpdateRequest, ::order_service::v1::UpdateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Update_, context, request, response);
}

void OrderService::Stub::async::Update(::grpc::ClientContext* context, const ::order_service::v1::UpdateRequest* request, ::order_service::v1::UpdateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::order_service::v1::UpdateRequest, ::order_service::v1::UpdateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, std::move(f));
}

void OrderService::Stub::async::Update(::grpc::ClientContext* context, const ::order_service::v1::UpdateRequest* request, ::order_service::v1::UpdateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::order_service::v1::UpdateResponse>* OrderService::Stub::PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::order_service::v1::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::order_service::v1::UpdateResponse, ::order_service::v1::UpdateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Update_, context, request);
}

::grpc::ClientAsyncResponseReader< ::order_service::v1::UpdateResponse>* OrderService::Stub::AsyncUpdateRaw(::grpc::ClientContext* context, const ::order_service::v1::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::order_service::v1::StreamOrderUpdateResponse>* OrderService::Stub::StreamOrderUpdatedRaw(::grpc::ClientContext* context, const ::order_service::v1::StreamOrderUpdateRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::order_service::v1::StreamOrderUpdateResponse>::Create(channel_.get(), rpcmethod_StreamOrderUpdated_, context, request);
}

void OrderService::Stub::async::StreamOrderUpdated(::grpc::ClientContext* context, const ::order_service::v1::StreamOrderUpdateRequest* request, ::grpc::ClientReadReactor< ::order_service::v1::StreamOrderUpdateResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::order_service::v1::StreamOrderUpdateResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamOrderUpdated_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::order_service::v1::StreamOrderUpdateResponse>* OrderService::Stub::AsyncStreamOrderUpdatedRaw(::grpc::ClientContext* context, const ::order_service::v1::StreamOrderUpdateRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::order_service::v1::StreamOrderUpdateResponse>::Create(channel_.get(), cq, rpcmethod_StreamOrderUpdated_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::order_service::v1::StreamOrderUpdateResponse>* OrderService::Stub::PrepareAsyncStreamOrderUpdatedRaw(::grpc::ClientContext* context, const ::order_service::v1::StreamOrderUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::order_service::v1::StreamOrderUpdateResponse>::Create(channel_.get(), cq, rpcmethod_StreamOrderUpdated_, context, request, false, nullptr);
}

OrderService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrderService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrderService::Service, ::order_service::v1::GetRequest, ::order_service::v1::GetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::order_service::v1::GetRequest* req,
             ::order_service::v1::GetResponse* resp) {
               return service->Get(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrderService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrderService::Service, ::order_service::v1::ListRequest, ::order_service::v1::ListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::order_service::v1::ListRequest* req,
             ::order_service::v1::ListResponse* resp) {
               return service->List(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrderService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrderService::Service, ::order_service::v1::CreateRequest, ::order_service::v1::CreateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::order_service::v1::CreateRequest* req,
             ::order_service::v1::CreateResponse* resp) {
               return service->Create(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrderService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrderService::Service, ::order_service::v1::UpdateRequest, ::order_service::v1::UpdateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::order_service::v1::UpdateRequest* req,
             ::order_service::v1::UpdateResponse* resp) {
               return service->Update(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrderService_method_names[4],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< OrderService::Service, ::order_service::v1::StreamOrderUpdateRequest, ::order_service::v1::StreamOrderUpdateResponse>(
          [](OrderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::order_service::v1::StreamOrderUpdateRequest* req,
             ::grpc::ServerWriter<::order_service::v1::StreamOrderUpdateResponse>* writer) {
               return service->StreamOrderUpdated(ctx, req, writer);
             }, this)));
}

OrderService::Service::~Service() {
}

::grpc::Status OrderService::Service::Get(::grpc::ServerContext* context, const ::order_service::v1::GetRequest* request, ::order_service::v1::GetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrderService::Service::List(::grpc::ServerContext* context, const ::order_service::v1::ListRequest* request, ::order_service::v1::ListResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrderService::Service::Create(::grpc::ServerContext* context, const ::order_service::v1::CreateRequest* request, ::order_service::v1::CreateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrderService::Service::Update(::grpc::ServerContext* context, const ::order_service::v1::UpdateRequest* request, ::order_service::v1::UpdateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrderService::Service::StreamOrderUpdated(::grpc::ServerContext* context, const ::order_service::v1::StreamOrderUpdateRequest* request, ::grpc::ServerWriter< ::order_service::v1::StreamOrderUpdateResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace order_service
}  // namespace v1

