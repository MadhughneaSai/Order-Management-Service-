// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: order_service/order.proto
#ifndef GRPC_order_5fservice_2forder_2eproto__INCLUDED
#define GRPC_order_5fservice_2forder_2eproto__INCLUDED

#include "order_service/order.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace order_service {
namespace v1 {

class OrderService final {
 public:
  static constexpr char const* service_full_name() {
    return "order_service.v1.OrderService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Get(::grpc::ClientContext* context, const ::order_service::v1::GetRequest& request, ::order_service::v1::GetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::order_service::v1::GetResponse>> AsyncGet(::grpc::ClientContext* context, const ::order_service::v1::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::order_service::v1::GetResponse>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::order_service::v1::GetResponse>> PrepareAsyncGet(::grpc::ClientContext* context, const ::order_service::v1::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::order_service::v1::GetResponse>>(PrepareAsyncGetRaw(context, request, cq));
    }
    virtual ::grpc::Status List(::grpc::ClientContext* context, const ::order_service::v1::ListRequest& request, ::order_service::v1::ListResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::order_service::v1::ListResponse>> AsyncList(::grpc::ClientContext* context, const ::order_service::v1::ListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::order_service::v1::ListResponse>>(AsyncListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::order_service::v1::ListResponse>> PrepareAsyncList(::grpc::ClientContext* context, const ::order_service::v1::ListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::order_service::v1::ListResponse>>(PrepareAsyncListRaw(context, request, cq));
    }
    virtual ::grpc::Status Create(::grpc::ClientContext* context, const ::order_service::v1::CreateRequest& request, ::order_service::v1::CreateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::order_service::v1::CreateResponse>> AsyncCreate(::grpc::ClientContext* context, const ::order_service::v1::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::order_service::v1::CreateResponse>>(AsyncCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::order_service::v1::CreateResponse>> PrepareAsyncCreate(::grpc::ClientContext* context, const ::order_service::v1::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::order_service::v1::CreateResponse>>(PrepareAsyncCreateRaw(context, request, cq));
    }
    virtual ::grpc::Status Update(::grpc::ClientContext* context, const ::order_service::v1::UpdateRequest& request, ::order_service::v1::UpdateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::order_service::v1::UpdateResponse>> AsyncUpdate(::grpc::ClientContext* context, const ::order_service::v1::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::order_service::v1::UpdateResponse>>(AsyncUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::order_service::v1::UpdateResponse>> PrepareAsyncUpdate(::grpc::ClientContext* context, const ::order_service::v1::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::order_service::v1::UpdateResponse>>(PrepareAsyncUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::order_service::v1::StreamOrderUpdateResponse>> StreamOrderUpdated(::grpc::ClientContext* context, const ::order_service::v1::StreamOrderUpdateRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::order_service::v1::StreamOrderUpdateResponse>>(StreamOrderUpdatedRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::order_service::v1::StreamOrderUpdateResponse>> AsyncStreamOrderUpdated(::grpc::ClientContext* context, const ::order_service::v1::StreamOrderUpdateRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::order_service::v1::StreamOrderUpdateResponse>>(AsyncStreamOrderUpdatedRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::order_service::v1::StreamOrderUpdateResponse>> PrepareAsyncStreamOrderUpdated(::grpc::ClientContext* context, const ::order_service::v1::StreamOrderUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::order_service::v1::StreamOrderUpdateResponse>>(PrepareAsyncStreamOrderUpdatedRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Get(::grpc::ClientContext* context, const ::order_service::v1::GetRequest* request, ::order_service::v1::GetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Get(::grpc::ClientContext* context, const ::order_service::v1::GetRequest* request, ::order_service::v1::GetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void List(::grpc::ClientContext* context, const ::order_service::v1::ListRequest* request, ::order_service::v1::ListResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void List(::grpc::ClientContext* context, const ::order_service::v1::ListRequest* request, ::order_service::v1::ListResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Create(::grpc::ClientContext* context, const ::order_service::v1::CreateRequest* request, ::order_service::v1::CreateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Create(::grpc::ClientContext* context, const ::order_service::v1::CreateRequest* request, ::order_service::v1::CreateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Update(::grpc::ClientContext* context, const ::order_service::v1::UpdateRequest* request, ::order_service::v1::UpdateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Update(::grpc::ClientContext* context, const ::order_service::v1::UpdateRequest* request, ::order_service::v1::UpdateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void StreamOrderUpdated(::grpc::ClientContext* context, const ::order_service::v1::StreamOrderUpdateRequest* request, ::grpc::ClientReadReactor< ::order_service::v1::StreamOrderUpdateResponse>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::order_service::v1::GetResponse>* AsyncGetRaw(::grpc::ClientContext* context, const ::order_service::v1::GetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::order_service::v1::GetResponse>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::order_service::v1::GetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::order_service::v1::ListResponse>* AsyncListRaw(::grpc::ClientContext* context, const ::order_service::v1::ListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::order_service::v1::ListResponse>* PrepareAsyncListRaw(::grpc::ClientContext* context, const ::order_service::v1::ListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::order_service::v1::CreateResponse>* AsyncCreateRaw(::grpc::ClientContext* context, const ::order_service::v1::CreateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::order_service::v1::CreateResponse>* PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::order_service::v1::CreateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::order_service::v1::UpdateResponse>* AsyncUpdateRaw(::grpc::ClientContext* context, const ::order_service::v1::UpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::order_service::v1::UpdateResponse>* PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::order_service::v1::UpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::order_service::v1::StreamOrderUpdateResponse>* StreamOrderUpdatedRaw(::grpc::ClientContext* context, const ::order_service::v1::StreamOrderUpdateRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::order_service::v1::StreamOrderUpdateResponse>* AsyncStreamOrderUpdatedRaw(::grpc::ClientContext* context, const ::order_service::v1::StreamOrderUpdateRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::order_service::v1::StreamOrderUpdateResponse>* PrepareAsyncStreamOrderUpdatedRaw(::grpc::ClientContext* context, const ::order_service::v1::StreamOrderUpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Get(::grpc::ClientContext* context, const ::order_service::v1::GetRequest& request, ::order_service::v1::GetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::order_service::v1::GetResponse>> AsyncGet(::grpc::ClientContext* context, const ::order_service::v1::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::order_service::v1::GetResponse>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::order_service::v1::GetResponse>> PrepareAsyncGet(::grpc::ClientContext* context, const ::order_service::v1::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::order_service::v1::GetResponse>>(PrepareAsyncGetRaw(context, request, cq));
    }
    ::grpc::Status List(::grpc::ClientContext* context, const ::order_service::v1::ListRequest& request, ::order_service::v1::ListResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::order_service::v1::ListResponse>> AsyncList(::grpc::ClientContext* context, const ::order_service::v1::ListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::order_service::v1::ListResponse>>(AsyncListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::order_service::v1::ListResponse>> PrepareAsyncList(::grpc::ClientContext* context, const ::order_service::v1::ListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::order_service::v1::ListResponse>>(PrepareAsyncListRaw(context, request, cq));
    }
    ::grpc::Status Create(::grpc::ClientContext* context, const ::order_service::v1::CreateRequest& request, ::order_service::v1::CreateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::order_service::v1::CreateResponse>> AsyncCreate(::grpc::ClientContext* context, const ::order_service::v1::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::order_service::v1::CreateResponse>>(AsyncCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::order_service::v1::CreateResponse>> PrepareAsyncCreate(::grpc::ClientContext* context, const ::order_service::v1::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::order_service::v1::CreateResponse>>(PrepareAsyncCreateRaw(context, request, cq));
    }
    ::grpc::Status Update(::grpc::ClientContext* context, const ::order_service::v1::UpdateRequest& request, ::order_service::v1::UpdateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::order_service::v1::UpdateResponse>> AsyncUpdate(::grpc::ClientContext* context, const ::order_service::v1::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::order_service::v1::UpdateResponse>>(AsyncUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::order_service::v1::UpdateResponse>> PrepareAsyncUpdate(::grpc::ClientContext* context, const ::order_service::v1::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::order_service::v1::UpdateResponse>>(PrepareAsyncUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::order_service::v1::StreamOrderUpdateResponse>> StreamOrderUpdated(::grpc::ClientContext* context, const ::order_service::v1::StreamOrderUpdateRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::order_service::v1::StreamOrderUpdateResponse>>(StreamOrderUpdatedRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::order_service::v1::StreamOrderUpdateResponse>> AsyncStreamOrderUpdated(::grpc::ClientContext* context, const ::order_service::v1::StreamOrderUpdateRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::order_service::v1::StreamOrderUpdateResponse>>(AsyncStreamOrderUpdatedRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::order_service::v1::StreamOrderUpdateResponse>> PrepareAsyncStreamOrderUpdated(::grpc::ClientContext* context, const ::order_service::v1::StreamOrderUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::order_service::v1::StreamOrderUpdateResponse>>(PrepareAsyncStreamOrderUpdatedRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Get(::grpc::ClientContext* context, const ::order_service::v1::GetRequest* request, ::order_service::v1::GetResponse* response, std::function<void(::grpc::Status)>) override;
      void Get(::grpc::ClientContext* context, const ::order_service::v1::GetRequest* request, ::order_service::v1::GetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void List(::grpc::ClientContext* context, const ::order_service::v1::ListRequest* request, ::order_service::v1::ListResponse* response, std::function<void(::grpc::Status)>) override;
      void List(::grpc::ClientContext* context, const ::order_service::v1::ListRequest* request, ::order_service::v1::ListResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Create(::grpc::ClientContext* context, const ::order_service::v1::CreateRequest* request, ::order_service::v1::CreateResponse* response, std::function<void(::grpc::Status)>) override;
      void Create(::grpc::ClientContext* context, const ::order_service::v1::CreateRequest* request, ::order_service::v1::CreateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Update(::grpc::ClientContext* context, const ::order_service::v1::UpdateRequest* request, ::order_service::v1::UpdateResponse* response, std::function<void(::grpc::Status)>) override;
      void Update(::grpc::ClientContext* context, const ::order_service::v1::UpdateRequest* request, ::order_service::v1::UpdateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StreamOrderUpdated(::grpc::ClientContext* context, const ::order_service::v1::StreamOrderUpdateRequest* request, ::grpc::ClientReadReactor< ::order_service::v1::StreamOrderUpdateResponse>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::order_service::v1::GetResponse>* AsyncGetRaw(::grpc::ClientContext* context, const ::order_service::v1::GetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::order_service::v1::GetResponse>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::order_service::v1::GetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::order_service::v1::ListResponse>* AsyncListRaw(::grpc::ClientContext* context, const ::order_service::v1::ListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::order_service::v1::ListResponse>* PrepareAsyncListRaw(::grpc::ClientContext* context, const ::order_service::v1::ListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::order_service::v1::CreateResponse>* AsyncCreateRaw(::grpc::ClientContext* context, const ::order_service::v1::CreateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::order_service::v1::CreateResponse>* PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::order_service::v1::CreateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::order_service::v1::UpdateResponse>* AsyncUpdateRaw(::grpc::ClientContext* context, const ::order_service::v1::UpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::order_service::v1::UpdateResponse>* PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::order_service::v1::UpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::order_service::v1::StreamOrderUpdateResponse>* StreamOrderUpdatedRaw(::grpc::ClientContext* context, const ::order_service::v1::StreamOrderUpdateRequest& request) override;
    ::grpc::ClientAsyncReader< ::order_service::v1::StreamOrderUpdateResponse>* AsyncStreamOrderUpdatedRaw(::grpc::ClientContext* context, const ::order_service::v1::StreamOrderUpdateRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::order_service::v1::StreamOrderUpdateResponse>* PrepareAsyncStreamOrderUpdatedRaw(::grpc::ClientContext* context, const ::order_service::v1::StreamOrderUpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Get_;
    const ::grpc::internal::RpcMethod rpcmethod_List_;
    const ::grpc::internal::RpcMethod rpcmethod_Create_;
    const ::grpc::internal::RpcMethod rpcmethod_Update_;
    const ::grpc::internal::RpcMethod rpcmethod_StreamOrderUpdated_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Get(::grpc::ServerContext* context, const ::order_service::v1::GetRequest* request, ::order_service::v1::GetResponse* response);
    virtual ::grpc::Status List(::grpc::ServerContext* context, const ::order_service::v1::ListRequest* request, ::order_service::v1::ListResponse* response);
    virtual ::grpc::Status Create(::grpc::ServerContext* context, const ::order_service::v1::CreateRequest* request, ::order_service::v1::CreateResponse* response);
    virtual ::grpc::Status Update(::grpc::ServerContext* context, const ::order_service::v1::UpdateRequest* request, ::order_service::v1::UpdateResponse* response);
    virtual ::grpc::Status StreamOrderUpdated(::grpc::ServerContext* context, const ::order_service::v1::StreamOrderUpdateRequest* request, ::grpc::ServerWriter< ::order_service::v1::StreamOrderUpdateResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Get() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::order_service::v1::GetRequest* /*request*/, ::order_service::v1::GetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::order_service::v1::GetRequest* request, ::grpc::ServerAsyncResponseWriter< ::order_service::v1::GetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_List() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::order_service::v1::ListRequest* /*request*/, ::order_service::v1::ListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestList(::grpc::ServerContext* context, ::order_service::v1::ListRequest* request, ::grpc::ServerAsyncResponseWriter< ::order_service::v1::ListResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Create() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::order_service::v1::CreateRequest* /*request*/, ::order_service::v1::CreateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate(::grpc::ServerContext* context, ::order_service::v1::CreateRequest* request, ::grpc::ServerAsyncResponseWriter< ::order_service::v1::CreateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Update() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::order_service::v1::UpdateRequest* /*request*/, ::order_service::v1::UpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdate(::grpc::ServerContext* context, ::order_service::v1::UpdateRequest* request, ::grpc::ServerAsyncResponseWriter< ::order_service::v1::UpdateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamOrderUpdated : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StreamOrderUpdated() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_StreamOrderUpdated() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamOrderUpdated(::grpc::ServerContext* /*context*/, const ::order_service::v1::StreamOrderUpdateRequest* /*request*/, ::grpc::ServerWriter< ::order_service::v1::StreamOrderUpdateResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamOrderUpdated(::grpc::ServerContext* context, ::order_service::v1::StreamOrderUpdateRequest* request, ::grpc::ServerAsyncWriter< ::order_service::v1::StreamOrderUpdateResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Get<WithAsyncMethod_List<WithAsyncMethod_Create<WithAsyncMethod_Update<WithAsyncMethod_StreamOrderUpdated<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Get() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::order_service::v1::GetRequest, ::order_service::v1::GetResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::order_service::v1::GetRequest* request, ::order_service::v1::GetResponse* response) { return this->Get(context, request, response); }));}
    void SetMessageAllocatorFor_Get(
        ::grpc::MessageAllocator< ::order_service::v1::GetRequest, ::order_service::v1::GetResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::order_service::v1::GetRequest, ::order_service::v1::GetResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::order_service::v1::GetRequest* /*request*/, ::order_service::v1::GetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Get(
      ::grpc::CallbackServerContext* /*context*/, const ::order_service::v1::GetRequest* /*request*/, ::order_service::v1::GetResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_List() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::order_service::v1::ListRequest, ::order_service::v1::ListResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::order_service::v1::ListRequest* request, ::order_service::v1::ListResponse* response) { return this->List(context, request, response); }));}
    void SetMessageAllocatorFor_List(
        ::grpc::MessageAllocator< ::order_service::v1::ListRequest, ::order_service::v1::ListResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::order_service::v1::ListRequest, ::order_service::v1::ListResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::order_service::v1::ListRequest* /*request*/, ::order_service::v1::ListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* List(
      ::grpc::CallbackServerContext* /*context*/, const ::order_service::v1::ListRequest* /*request*/, ::order_service::v1::ListResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Create() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::order_service::v1::CreateRequest, ::order_service::v1::CreateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::order_service::v1::CreateRequest* request, ::order_service::v1::CreateResponse* response) { return this->Create(context, request, response); }));}
    void SetMessageAllocatorFor_Create(
        ::grpc::MessageAllocator< ::order_service::v1::CreateRequest, ::order_service::v1::CreateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::order_service::v1::CreateRequest, ::order_service::v1::CreateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::order_service::v1::CreateRequest* /*request*/, ::order_service::v1::CreateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Create(
      ::grpc::CallbackServerContext* /*context*/, const ::order_service::v1::CreateRequest* /*request*/, ::order_service::v1::CreateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Update() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::order_service::v1::UpdateRequest, ::order_service::v1::UpdateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::order_service::v1::UpdateRequest* request, ::order_service::v1::UpdateResponse* response) { return this->Update(context, request, response); }));}
    void SetMessageAllocatorFor_Update(
        ::grpc::MessageAllocator< ::order_service::v1::UpdateRequest, ::order_service::v1::UpdateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::order_service::v1::UpdateRequest, ::order_service::v1::UpdateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::order_service::v1::UpdateRequest* /*request*/, ::order_service::v1::UpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Update(
      ::grpc::CallbackServerContext* /*context*/, const ::order_service::v1::UpdateRequest* /*request*/, ::order_service::v1::UpdateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StreamOrderUpdated : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StreamOrderUpdated() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackServerStreamingHandler< ::order_service::v1::StreamOrderUpdateRequest, ::order_service::v1::StreamOrderUpdateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::order_service::v1::StreamOrderUpdateRequest* request) { return this->StreamOrderUpdated(context, request); }));
    }
    ~WithCallbackMethod_StreamOrderUpdated() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamOrderUpdated(::grpc::ServerContext* /*context*/, const ::order_service::v1::StreamOrderUpdateRequest* /*request*/, ::grpc::ServerWriter< ::order_service::v1::StreamOrderUpdateResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::order_service::v1::StreamOrderUpdateResponse>* StreamOrderUpdated(
      ::grpc::CallbackServerContext* /*context*/, const ::order_service::v1::StreamOrderUpdateRequest* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Get<WithCallbackMethod_List<WithCallbackMethod_Create<WithCallbackMethod_Update<WithCallbackMethod_StreamOrderUpdated<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Get() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::order_service::v1::GetRequest* /*request*/, ::order_service::v1::GetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_List() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::order_service::v1::ListRequest* /*request*/, ::order_service::v1::ListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Create() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::order_service::v1::CreateRequest* /*request*/, ::order_service::v1::CreateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Update() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::order_service::v1::UpdateRequest* /*request*/, ::order_service::v1::UpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StreamOrderUpdated : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StreamOrderUpdated() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_StreamOrderUpdated() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamOrderUpdated(::grpc::ServerContext* /*context*/, const ::order_service::v1::StreamOrderUpdateRequest* /*request*/, ::grpc::ServerWriter< ::order_service::v1::StreamOrderUpdateResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Get() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::order_service::v1::GetRequest* /*request*/, ::order_service::v1::GetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_List() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::order_service::v1::ListRequest* /*request*/, ::order_service::v1::ListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Create() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::order_service::v1::CreateRequest* /*request*/, ::order_service::v1::CreateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Update() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::order_service::v1::UpdateRequest* /*request*/, ::order_service::v1::UpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamOrderUpdated : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StreamOrderUpdated() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_StreamOrderUpdated() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamOrderUpdated(::grpc::ServerContext* /*context*/, const ::order_service::v1::StreamOrderUpdateRequest* /*request*/, ::grpc::ServerWriter< ::order_service::v1::StreamOrderUpdateResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamOrderUpdated(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Get() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Get(context, request, response); }));
    }
    ~WithRawCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::order_service::v1::GetRequest* /*request*/, ::order_service::v1::GetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Get(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_List() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->List(context, request, response); }));
    }
    ~WithRawCallbackMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::order_service::v1::ListRequest* /*request*/, ::order_service::v1::ListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* List(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Create() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Create(context, request, response); }));
    }
    ~WithRawCallbackMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::order_service::v1::CreateRequest* /*request*/, ::order_service::v1::CreateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Create(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Update() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Update(context, request, response); }));
    }
    ~WithRawCallbackMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::order_service::v1::UpdateRequest* /*request*/, ::order_service::v1::UpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Update(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StreamOrderUpdated : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StreamOrderUpdated() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->StreamOrderUpdated(context, request); }));
    }
    ~WithRawCallbackMethod_StreamOrderUpdated() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamOrderUpdated(::grpc::ServerContext* /*context*/, const ::order_service::v1::StreamOrderUpdateRequest* /*request*/, ::grpc::ServerWriter< ::order_service::v1::StreamOrderUpdateResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* StreamOrderUpdated(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Get() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::order_service::v1::GetRequest, ::order_service::v1::GetResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::order_service::v1::GetRequest, ::order_service::v1::GetResponse>* streamer) {
                       return this->StreamedGet(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::order_service::v1::GetRequest* /*request*/, ::order_service::v1::GetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::order_service::v1::GetRequest,::order_service::v1::GetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_List() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::order_service::v1::ListRequest, ::order_service::v1::ListResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::order_service::v1::ListRequest, ::order_service::v1::ListResponse>* streamer) {
                       return this->StreamedList(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::order_service::v1::ListRequest* /*request*/, ::order_service::v1::ListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::order_service::v1::ListRequest,::order_service::v1::ListResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Create() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::order_service::v1::CreateRequest, ::order_service::v1::CreateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::order_service::v1::CreateRequest, ::order_service::v1::CreateResponse>* streamer) {
                       return this->StreamedCreate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::order_service::v1::CreateRequest* /*request*/, ::order_service::v1::CreateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::order_service::v1::CreateRequest,::order_service::v1::CreateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Update() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::order_service::v1::UpdateRequest, ::order_service::v1::UpdateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::order_service::v1::UpdateRequest, ::order_service::v1::UpdateResponse>* streamer) {
                       return this->StreamedUpdate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::order_service::v1::UpdateRequest* /*request*/, ::order_service::v1::UpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::order_service::v1::UpdateRequest,::order_service::v1::UpdateResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Get<WithStreamedUnaryMethod_List<WithStreamedUnaryMethod_Create<WithStreamedUnaryMethod_Update<Service > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_StreamOrderUpdated : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_StreamOrderUpdated() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::order_service::v1::StreamOrderUpdateRequest, ::order_service::v1::StreamOrderUpdateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::order_service::v1::StreamOrderUpdateRequest, ::order_service::v1::StreamOrderUpdateResponse>* streamer) {
                       return this->StreamedStreamOrderUpdated(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_StreamOrderUpdated() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StreamOrderUpdated(::grpc::ServerContext* /*context*/, const ::order_service::v1::StreamOrderUpdateRequest* /*request*/, ::grpc::ServerWriter< ::order_service::v1::StreamOrderUpdateResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedStreamOrderUpdated(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::order_service::v1::StreamOrderUpdateRequest,::order_service::v1::StreamOrderUpdateResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_StreamOrderUpdated<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_Get<WithStreamedUnaryMethod_List<WithStreamedUnaryMethod_Create<WithStreamedUnaryMethod_Update<WithSplitStreamingMethod_StreamOrderUpdated<Service > > > > > StreamedService;
};

}  // namespace v1
}  // namespace order_service


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_order_5fservice_2forder_2eproto__INCLUDED
